spring:
  config:
    activate:
      on-profile: dev
  servlet:
    multipart:
      enabled: true
      max-file-size: 20MB
      max-request-size: 20MB

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${url}
    username: ${rds_username}
    password: ${rds_password}

  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true

cloud:
  aws:
    s3:
      bucket: ${bucket}
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials: #aws의 instanceProfile을 사용함
      instanceProfile: true
logging.level:
  org.hibernate.SQL: debug
  org.hibernate.type: trace

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
    display-request-duration: true
  api-docs:
    path: /api-docs
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /**

jwt:
  secret: ${JWT_SECRET_KEY}

server:
  ssl:
    key-store: ${SSL_KEY_STORE}
    key-store-type: ${SSL_KEY_TYPE}
    key-store-password: ${SSL_KEY_PW}

security:
  oauth2:
    client:
      registration:
        apple:
          grant-type: authorization_code
          client-id: ${APPLE_CLIENT_ID}
          key-id: ${APPLE_KEY_ID}
          team-id: ${APPLE_TEAM_ID}
#          key-path: #p8key 조합
          redirect-uri: https://mogak.shop/apple/callback
          client-authentication-method: POST
          client-name: Apple
          scope:
            - email
            - name
      provider: #사용자 인증 정보를 제공하는 구성 요소를 지정하는데 사용
        apple:
          authorizationUri: https://appleid.apple.com/auth/authorize?response_mode=form_post #인가코드 보내는 uri
          tokenUri: https://appleid.apple.com/auth/token #id_token
